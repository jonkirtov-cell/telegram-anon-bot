import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from supabase import create_client, Client

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ['BOT_TOKEN']
SUPABASE_URL = os.environ['SUPABASE_URL']
SUPABASE_KEY = os.environ['SUPABASE_KEY']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or f"user_{user.id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user_data = supabase.table('users').select('*').eq('tg_id', user_id).execute()
    
    if not user_data.data:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import uuid
        unique_link = str(uuid.uuid4())[:8]
        supabase.table('users').insert({
            'tg_id': user_id,
            'username': username,
            'unique_link': unique_link,
            'is_active': True
        }).execute()
    else:
        unique_link = user_data.data[0]['unique_link']

    referral_link = f"https://t.me/{context.bot.username}?start={unique_link}"
    
    welcome_text = f"""
    –ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

    **–¢–≤–æ–π –¢–∞–π–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.**
    –¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    {referral_link}

    –ü–æ–¥–µ–ª–∏—Å—å –µ—é –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ —É–∑–Ω–∞–π, —á—Ç–æ –æ —Ç–µ–±–µ –¥—É–º–∞—é—Ç –¥—Ä—É–∑—å—è! üòâ
    """
    await update.message.reply_text(welcome_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user = update.effective_user
        message_text = update.message.text

        if context.args and len(context.args) > 0:
            unique_link = context.args[0]
            target_user_data = supabase.table('users').select('*').eq('unique_link', unique_link).eq('is_active', True).execute()
            
            if target_user_data.data:
                target_user = target_user_data.data[0]
                target_tg_id = target_user['tg_id']
                
                supabase.table('messages').insert({
                    'from_user_tg_id': user.id,
                    'to_user_tg_id': target_tg_id,
                    'message_text': message_text,
                }).execute()

                await context.bot.send_message(
                    chat_id=target_tg_id,
                    text=f"üì® *–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\n_{message_text}_",
                    parse_mode='Markdown'
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
                return

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥—Ä—É–≥–∞.")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()
